import { View, Text, TouchableOpacity, ScrollView, FlatList, ActivityIndicator, KeyboardAvoidingView, Platform } from 'react-native';
import React, { useState, useEffect } from 'react';
import { router } from 'expo-router';
import { ArrowLeft } from 'lucide-react-native';
import { databases, config, getCurrentUser, saveCareerPath, isCareerPathSaved } from '../../lib/appwrite';
import SurveyCareerCard from '@/components/SurveyCareerCard';
import AutoComplete from '@/components/AutoComplete';
import SelectedItemsList from '@/components/SelectedItemsList';
import ModalSelect from '@/components/ModalSelect';
import ModalSelectorButton from '@/components/ModalSelectorButton';
import { findCareerMatches, saveSurveyData, completeSurvey } from '../../components/careerMatching';

const CareerSurvey = () => {
  // User selections
  const [degrees, setDegrees] = useState<string[]>([]);
  const [certifications, setCertifications] = useState<string[]>([]);
  const [selectedSkills, setSelectedSkills] = useState<string[]>([]);
  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);

  // Modal visibility states
  const [skillsModalVisible, setSkillsModalVisible] = useState(false);
  const [interestsModalVisible, setInterestsModalVisible] = useState(false);
  const [industriesModalVisible, setIndustriesModalVisible] = useState(false);

  // Input values for autocomplete
  const [degreeInput, setDegreeInput] = useState('');
  const [certificationInput, setCertificationInput] = useState('');

  // Survey data
  const [availableDegrees] = useState([
    "Special Education", "Statistics", "Structural Engineering", "Subject-Specific Degree", "Supply Chain Management", "Surgery", "Sustainability Management", "Systems Engineering", "Taxation", "Technical Communication", "Textile Design", "Visual Arts", "Visual Communications", "Web Development"
  ]);

  const [availableCertifications] = useState([
     "Toon Boom Certification", "U.S. Coast Guard License (for certain roles)", "Unity Certified Developer", "Unity Certified Programmer", "Unreal Engine Developer Certification", "VR/AR Design Certifications", "WELL AP Certification", "Well Control Certification"
  ]);

  const [availableSkills] = useState([
    "Tax Planning", "Teacher Training", "Teaching", "Team Leadership", "Technical Analysis", "Technical Documentation", "Telescope Operation", "Test Automation Frameworks", "Testing", "Testing and Debugging", "Textile Design", "Theoretical Physics", "Therapeutic Techniques", "Therapy", "Thermodynamics", "Tissue Engineering", "Transportation Management", "Trend Analysis", "Troubleshooting", "Typography", "UI/UX Design Principles", "Unit Testing", "Unity", "Unity/Unreal Engine", "User Experience Design", "User Research", "UX Design for VR/AR", "Vehicle Design", "Vendor Management", "Version Control", "Version Control (Git)", "Video Editing", "Vision Correction", "Visual Communication", "Visual Composition", "Visual Design", "Visual Storytelling", "VPN Setup", "Vulnerability Assessment", "Waste Management", "Water Treatment", "Weather Forecasting", "Well Design", "Wireframing"
  ]);

  const [availableInterests] = useState([
    "Software Quality Advocacy", "Sound Engineering", "Space", "Space Exploration", "Special Needs", "Startups", "Statistics", "Storytelling", "Surgery", "Sustainability", "Sustainable Building", "Sustainable Extraction", "Systems Optimization", "Systems Thinking", "Taxation", "Teaching", "Team Collaboration", "Technology", "Technology Implementation", "Technology Management", "Textiles", "Transportation", "User Experience", "User-Centered Testing", "User-Centric Design", "User-Centric Innovation", "Virtual Reality", "Vision Care", "Visual Arts", "Visual Culture", "Visual Storytelling", "Wealth Management", "Wellness", "Writing"
  ]);

  const industries = [
    "Technology", "Business", "Healthcare", "Finance", "Creative Arts",
    "Engineering", "Science", "Education", "Environment"
  ];

  const [loading, setLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [matchedPaths, setMatchedPaths] = useState<any[]>([]);
  const [savedPaths, setSavedPaths] = useState<Record<string, boolean>>({});

  // Functions to handle selections
  const addDegree = (degree: string) => {
    if (!degrees.includes(degree)) {
      setDegrees([...degrees, degree]);
    }
  };

  const addCertification = (certification: string) => {
    if (!certifications.includes(certification)) {
      setCertifications([...certifications, certification]);
    }
  };

  const toggleSkill = (skill: string) => {
    if (selectedSkills.includes(skill)) {
      setSelectedSkills(selectedSkills.filter(s => s !== skill));
    } else {
      setSelectedSkills([...selectedSkills, skill]);
    }
  };

  const toggleInterest = (interest: string) => {
    if (selectedInterests.includes(interest)) {
      setSelectedInterests(selectedInterests.filter(i => i !== interest));
    } else {
      setSelectedInterests([...selectedInterests, interest]);
    }
  };

  const toggleIndustry = (industry: string) => {
    if (selectedIndustries.includes(industry)) {
      setSelectedIndustries(selectedIndustries.filter(i => i !== industry));
    } else {
      setSelectedIndustries([...selectedIndustries, industry]);
    }
  };

  const removeDegree = (degree: string) => {
    setDegrees(degrees.filter(d => d !== degree));
  };

  const removeCertification = (certification: string) => {
    setCertifications(certifications.filter(c => c !== certification));
  };

  // Handle survey submission
  const handleSurveySubmit = async () => {
    try {
      setLoading(true);

      // Save survey data to user profile
      await saveSurveyData({
        degrees,
        certifications,
        skills: selectedSkills,
        interests: selectedInterests,
        interestedFields: selectedIndustries
      });

      // Find career matches based on selections
      const matches = await findCareerMatches({
        skills: selectedSkills,
        interests: selectedInterests,
        degrees,
        certifications,
        industries: selectedIndustries
      });

      // Check which paths are saved
      const pathSavedStatus: Record<string, boolean> = {};
      for (const path of matches) {
        pathSavedStatus[path.$id] = await isCareerPathSaved(path.$id);
      }

      setSavedPaths(pathSavedStatus);
      setMatchedPaths(matches);
      setShowResults(true);
      setLoading(false);
    } catch (error) {
      console.error("Error processing survey:", error);
      setLoading(false);
    }
  };

  // Handle path selection
  const handleSelectPath = async (pathId: string) => {
    try {
      setLoading(true);
      const success = await completeSurvey(pathId);

      if (success) {
        // Navigate to dashboard
        router.replace('/dashboard');
      } else {
        throw new Error("Failed to select path");
      }
    } catch (error) {
      console.error("Error selecting path:", error);
      setLoading(false);
    }
  };

  // Handle save/bookmark path
  const handleToggleSave = async (pathId: string) => {
    try {
      const result = await saveCareerPath(pathId);

      if (result.success) {
        setSavedPaths(prev => ({
          ...prev,
          [pathId]: result.isSaved
        }));
      }
    } catch (error) {
      console.error("Error saving path:", error);
    }
  };

  return (
    <View className="flex-1 bg-white">
      <View className="flex-row items-center px-4 pt-4 pb-2">
        <TouchableOpacity
          className="p-2 rounded-full bg-gray-50"
          onPress={() => router.back()}
          accessibilityLabel="Go back"
        >
          <ArrowLeft size={24} color="#333" />
        </TouchableOpacity>
        <View className="flex-1 items-center">
          <Text className="text-lg font-bold text-gray-800">Career Survey</Text>
        </View>
        <View style={{ width: 40 }}>{/* Spacer */}</View>
      </View>

      {loading ? (
        <View className="flex-1 justify-center items-center">
          <ActivityIndicator size="large" color="#3b82f6" />
          <Text className="mt-4 text-gray-600">Processing your information...</Text>
        </View>
      ) : showResults ? (
        <FlatList
          data={matchedPaths}
          keyExtractor={(item) => item.$id}
          contentContainerStyle={{ padding: 16 }}
          ListHeaderComponent={
            <View className="mb-4">
              <Text className="text-xl font-bold text-gray-800">Your Career Matches</Text>
              <Text className="text-gray-600 mt-1">
                Based on your skills, interests, and education, here are some career paths that might be a good fit for you.
              </Text>
            </View>
          }
          renderItem={({ item }) => (
            <SurveyCareerCard
              careerPath={item}
              onSelectPath={handleSelectPath}
              isSaved={savedPaths[item.$id] || false}
              onToggleSave={handleToggleSave}
            />
          )}
        />
      ) : (
        <ScrollView className="flex-1 px-4">
          <Text className="text-base text-gray-600 mb-4">
            Let's find the perfect career path for you. Tell us about your education, skills, and interests.
          </Text>

          {/* Education Section */}
          <View className="mb-6">
            <Text className="text-lg font-bold text-gray-800 mb-2">Education</Text>

            <Text className="font-semibold text-gray-700 mb-2">Degrees:</Text>
            <AutoComplete
              items={availableDegrees}
              onAdd={addDegree}
              placeholder="Enter your degree"
              inputValue={degreeInput}
              setInputValue={setDegreeInput}
            />
            <SelectedItemsList
              title="Your Degrees"
              items={degrees}
              onRemove={removeDegree}
            />

            <Text className="font-semibold text-gray-700 mb-2 mt-4">Certifications:</Text>
            <AutoComplete
              items={availableCertifications}
              onAdd={addCertification}
              placeholder="Enter your certification"
              inputValue={certificationInput}
              setInputValue={setCertificationInput}
            />
            <SelectedItemsList
              title="Your Certifications"
              items={certifications}
              onRemove={removeCertification}
            />
          </View>

          {/* Skills & Interests Section with Modal Selectors */}
          <View className="mb-6">
            <Text className="text-lg font-bold text-gray-800 mb-2">Skills & Interests</Text>

            <ModalSelectorButton
              title="Skills"
              selectedItems={selectedSkills}
              onPress={() => setSkillsModalVisible(true)}
            />

            <ModalSelectorButton
              title="Interests"
              selectedItems={selectedInterests}
              onPress={() => setInterestsModalVisible(true)}
            />
          </View>

          {/* Industries Section with Modal Selector */}
          <View className="mb-6">
            <Text className="text-lg font-bold text-gray-800 mb-2">Industries</Text>

            <ModalSelectorButton
              title="Industries you're interested in"
              selectedItems={selectedIndustries}
              onPress={() => setIndustriesModalVisible(true)}
            />
          </View>

          {/* Next Button */}
          <TouchableOpacity
            className="bg-blue-500 rounded-lg py-3 items-center mb-8"
            onPress={handleSurveySubmit}
            disabled={loading}
          >
            <Text className="text-white font-semibold text-lg">See My Career Matches</Text>
          </TouchableOpacity>
        </ScrollView>
      )}

      {/* Modal Components */}
      <ModalSelect
        title="Select Skills"
        items={availableSkills}
        selectedItems={selectedSkills}
        onToggleItem={toggleSkill}
        onClose={() => setSkillsModalVisible(false)}
        visible={skillsModalVisible}
      />

      <ModalSelect
        title="Select Interests"
        items={availableInterests}
        selectedItems={selectedInterests}
        onToggleItem={toggleInterest}
        onClose={() => setInterestsModalVisible(false)}
        visible={interestsModalVisible}
      />

      <ModalSelect
        title="Select Industries"
        items={industries}
        selectedItems={selectedIndustries}
        onToggleItem={toggleIndustry}
        onClose={() => setIndustriesModalVisible(false)}
        visible={industriesModalVisible}
      />
    </View>
  );
};

export default CareerSurvey;